// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.

package cat

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/mojo-lang/core/go/pkg/mojo/core"
)

func init() {
	core.RegisterJSONTypeDecoder("cat.BatchGetCatResponse", &BatchGetCatResponseCodec{})
	core.RegisterJSONTypeEncoder("cat.BatchGetCatResponse", &BatchGetCatResponseCodec{})
}

type BatchGetCatResponseCodec struct {
}

func (codec *BatchGetCatResponseCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	any := iter.ReadAny()
	batchGetCatResponse := (*BatchGetCatResponse)(ptr)
	if any.ValueType() == jsoniter.ArrayValue {
		any.ToVal(&batchGetCatResponse.Cats)
	}
}

func (codec *BatchGetCatResponseCodec) IsEmpty(ptr unsafe.Pointer) bool {
	batchGetCatResponse := (*BatchGetCatResponse)(ptr)
	return batchGetCatResponse == nil || len(batchGetCatResponse.Cats) == 0
}

func (codec *BatchGetCatResponseCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	batchGetCatResponse := (*BatchGetCatResponse)(ptr)
	if len(batchGetCatResponse.Cats) > 0 {
		stream.WriteVal(batchGetCatResponse.Cats)
	}
}
