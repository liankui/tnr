// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: cat/v1/cats.proto

package cat

import (
	context "context"
	cat "github.com/liankui/tnr/go/pkg/cat"
	core "github.com/mojo-lang/core/go/pkg/mojo/core"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatsClient is the client API for Cats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatsClient interface {
	CreateCat(ctx context.Context, in *CreateCatRequest, opts ...grpc.CallOption) (*cat.Cat, error)
	UpdateCat(ctx context.Context, in *UpdateCatRequest, opts ...grpc.CallOption) (*cat.Cat, error)
	GetCat(ctx context.Context, in *GetCatRequest, opts ...grpc.CallOption) (*cat.Cat, error)
	ListCats(ctx context.Context, in *ListCatsRequest, opts ...grpc.CallOption) (*ListCatsResponse, error)
	BatchGetCat(ctx context.Context, in *BatchGetCatRequest, opts ...grpc.CallOption) (*BatchGetCatResponse, error)
	DeleteCat(ctx context.Context, in *DeleteCatRequest, opts ...grpc.CallOption) (*core.Null, error)
}

type catsClient struct {
	cc grpc.ClientConnInterface
}

func NewCatsClient(cc grpc.ClientConnInterface) CatsClient {
	return &catsClient{cc}
}

func (c *catsClient) CreateCat(ctx context.Context, in *CreateCatRequest, opts ...grpc.CallOption) (*cat.Cat, error) {
	out := new(cat.Cat)
	err := c.cc.Invoke(ctx, "/cat.v1.Cats/create_cat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) UpdateCat(ctx context.Context, in *UpdateCatRequest, opts ...grpc.CallOption) (*cat.Cat, error) {
	out := new(cat.Cat)
	err := c.cc.Invoke(ctx, "/cat.v1.Cats/update_cat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) GetCat(ctx context.Context, in *GetCatRequest, opts ...grpc.CallOption) (*cat.Cat, error) {
	out := new(cat.Cat)
	err := c.cc.Invoke(ctx, "/cat.v1.Cats/get_cat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) ListCats(ctx context.Context, in *ListCatsRequest, opts ...grpc.CallOption) (*ListCatsResponse, error) {
	out := new(ListCatsResponse)
	err := c.cc.Invoke(ctx, "/cat.v1.Cats/list_cats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) BatchGetCat(ctx context.Context, in *BatchGetCatRequest, opts ...grpc.CallOption) (*BatchGetCatResponse, error) {
	out := new(BatchGetCatResponse)
	err := c.cc.Invoke(ctx, "/cat.v1.Cats/batch_get_cat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsClient) DeleteCat(ctx context.Context, in *DeleteCatRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, "/cat.v1.Cats/delete_cat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatsServer is the server API for Cats service.
// All implementations must embed UnimplementedCatsServer
// for forward compatibility
type CatsServer interface {
	CreateCat(context.Context, *CreateCatRequest) (*cat.Cat, error)
	UpdateCat(context.Context, *UpdateCatRequest) (*cat.Cat, error)
	GetCat(context.Context, *GetCatRequest) (*cat.Cat, error)
	ListCats(context.Context, *ListCatsRequest) (*ListCatsResponse, error)
	BatchGetCat(context.Context, *BatchGetCatRequest) (*BatchGetCatResponse, error)
	DeleteCat(context.Context, *DeleteCatRequest) (*core.Null, error)
	mustEmbedUnimplementedCatsServer()
}

// UnimplementedCatsServer must be embedded to have forward compatible implementations.
type UnimplementedCatsServer struct {
}

func (UnimplementedCatsServer) CreateCat(context.Context, *CreateCatRequest) (*cat.Cat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCat not implemented")
}
func (UnimplementedCatsServer) UpdateCat(context.Context, *UpdateCatRequest) (*cat.Cat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCat not implemented")
}
func (UnimplementedCatsServer) GetCat(context.Context, *GetCatRequest) (*cat.Cat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCat not implemented")
}
func (UnimplementedCatsServer) ListCats(context.Context, *ListCatsRequest) (*ListCatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCats not implemented")
}
func (UnimplementedCatsServer) BatchGetCat(context.Context, *BatchGetCatRequest) (*BatchGetCatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetCat not implemented")
}
func (UnimplementedCatsServer) DeleteCat(context.Context, *DeleteCatRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCat not implemented")
}
func (UnimplementedCatsServer) mustEmbedUnimplementedCatsServer() {}

// UnsafeCatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatsServer will
// result in compilation errors.
type UnsafeCatsServer interface {
	mustEmbedUnimplementedCatsServer()
}

func RegisterCatsServer(s grpc.ServiceRegistrar, srv CatsServer) {
	s.RegisterService(&Cats_ServiceDesc, srv)
}

func _Cats_CreateCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).CreateCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.v1.Cats/create_cat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).CreateCat(ctx, req.(*CreateCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_UpdateCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).UpdateCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.v1.Cats/update_cat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).UpdateCat(ctx, req.(*UpdateCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_GetCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).GetCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.v1.Cats/get_cat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).GetCat(ctx, req.(*GetCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_ListCats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).ListCats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.v1.Cats/list_cats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).ListCats(ctx, req.(*ListCatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_BatchGetCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).BatchGetCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.v1.Cats/batch_get_cat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).BatchGetCat(ctx, req.(*BatchGetCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cats_DeleteCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsServer).DeleteCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.v1.Cats/delete_cat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsServer).DeleteCat(ctx, req.(*DeleteCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cats_ServiceDesc is the grpc.ServiceDesc for Cats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cat.v1.Cats",
	HandlerType: (*CatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_cat",
			Handler:    _Cats_CreateCat_Handler,
		},
		{
			MethodName: "update_cat",
			Handler:    _Cats_UpdateCat_Handler,
		},
		{
			MethodName: "get_cat",
			Handler:    _Cats_GetCat_Handler,
		},
		{
			MethodName: "list_cats",
			Handler:    _Cats_ListCats_Handler,
		},
		{
			MethodName: "batch_get_cat",
			Handler:    _Cats_BatchGetCat_Handler,
		},
		{
			MethodName: "delete_cat",
			Handler:    _Cats_DeleteCat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cat/v1/cats.proto",
}
